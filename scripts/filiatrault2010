#! /usr/bin/env perl

use strict;
use warnings FATAL => 'all';
use Carp::Always;

# use FindBin;
# use lib "$FindBin::Bin";
# use Xyzzy;

use constant { TRUE => 1, FALSE => 0 };

# ------------------------------------------------------------------------
# Process the command line
# ------------------------------------------------------------------------

use File::Basename;
use Getopt::Std;

our $opt_d = ".";
our $opt_h;
our $opt_n = FALSE;
our $opt_p = FALSE;
our $opt_s = FALSE;
our $opt_t = "";
our $opt_u = FALSE;

sub usage {
  my $progname = basename($0);
  print STDERR "Usage: cat align.sam | $progname [options] ...\n";
  print STDERR "\n";

  print STDERR "-d DIR - output directory\n";
  print STDERR "-h - this message\n";
  print STDERR "-n - make naive profiles\n";
  print STDERR "-p - keep only perfect alignments (no gaps or mismatches)\n";
  print STDERR "-s - make sinister profiles\n";
  print STDERR "-t NAME - use NAME as suffix to profile filenames\n";
  print STDERR "-u - keep reads that align uniquely (to only one location)\n";

  print STDERR "\n";
  print STDERR "one or both of '-n' and '-s' must be specified\n";

  exit(@_);
}

my $stat = getopts('d:hnpst:u');
if (!$stat) {
  usage(1);
}
if ($opt_h) {
  usage();
}

if ( !$opt_n &&  !$opt_s ) {
  usage(1);
}

if ( $opt_t ne "" ) {
  $opt_t = "_".$opt_t;
}

if ( !$opt_u ) {
  print STDERR "*** Warning! Behavior for ambiguous alignments is under specified! ***\n";
}

# ------------------------------------------------------------------------
# Routines for processing size and alignment lines
# ------------------------------------------------------------------------

my $total_length = 0;
my $printed_length_warning = FALSE;

my %contig_length;
my %sinisters_plus;
my %sinisters_minus;
my %naives_plus;
my %naives_minus;

sub process_SQ_line {
  my $accession;
  my $length;
  foreach my $attr (split(/\t/,$1)) {
    if ( $attr =~ /SN:(.*)/ ) {
      $accession = $1;
    } elsif ( $attr =~ /LN:(.*)/ ) {
      $length = $1;
    }
  }
  (defined($accession)) || die "accession not found in input file,";
  (defined($length)) || die "length not found in input file,";

  $total_length += $length;
  if ( $total_length >= 500*10e6 && !$printed_length_warning ) {
    print STDERR "*** Warning! Larger than expected organism! ***\n";
    $printed_length_warning = TRUE;
  }

  $contig_length{$accession} = $length;
  if ($opt_s) {
    my $s_p = [-1];
    my $s_m = [-1];
    for (my $i=1; $i<=$length; $i++) {
      push @$s_p, 0;
      push @$s_m, 0;
    }
    $sinisters_plus{$accession} = $s_p;
    $sinisters_minus{$accession} = $s_m;
  }
  if ($opt_n) {
    my $n_p = [-1];
    my $n_m = [-1];
    for (my $i=1; $i<=$length; $i++) {
      push @$n_p, 0;
      push @$n_m, 0;
    }
    $naives_plus{$accession} = $n_p;
    $naives_minus{$accession} = $n_m;
  }
}

sub process_alignment_line {
  my ($qname,$flag,$rname,$pos,$mapq,$cigar,$rnext,$pnext,$tlen,$seq,$qual,@extra) = @_;

  my $s_p = $sinisters_plus{$rname};
  my $s_m = $sinisters_minus{$rname};
  my $n_p = $naives_plus{$rname};
  my $n_m = $naives_minus{$rname};

  my $rname_length = $contig_length{$rname};
  if (!defined($rname_length)) {
    # Skip. we aren't generating profiles for this accession
    next;
  }

  my $strand = ($flag & 0x10) ? "-" : "+";
  # $pos is leftmost mapping POSition of the first matching base.
  my $left_pos = $pos;
  # We have to compute the rightmost position
  my $right_pos = $pos;

  my $seq_width = 0;
  my $ref_width = 0;
  my $tmp_cigar = $cigar;
  while ( $tmp_cigar =~ /^([0-9]+)([A-Z])(.*)/ ) {
    my ($width,$op) = ($1,$2);
    $tmp_cigar = $3;
    if ( $op eq "M" ) {
      # M - alignment match (can be a sequence match or mismatch) 
      $seq_width += $width;
      $ref_width += $width;
      if ($opt_n) {
	for (my $i=1; $i<=$width; $i++) {
	  if ($strand eq "+") {
	    ${$n_p}[$right_pos]++;
	  } else {
	    ${$n_m}[$right_pos]++;
	  }
	  $right_pos++;
	}
      } else {
	$right_pos += $width;
      }
    } elsif ( $op eq "I" ) {
      # I - insertion to the reference
      $seq_width += $width;
      $ref_width += 0;
      $right_pos += 0;
    } elsif ( $op eq "D" ) {
      # D - deletion from the reference
      $seq_width += 0;
      $ref_width += $width;
      $right_pos += $width;
    } elsif ( $op eq "N" ) {
      # N - skipped region from the reference
      $seq_width += 0;
      $ref_width += $width;
      $right_pos += $width;
    } else {
      die "cigar=$cigar,";
    }
  }
  $right_pos--;

  ( 1 <= $right_pos && $right_pos <= $rname_length )
    || die "position <<$right_pos>> outside of genomic coordiantes,";

  if ($opt_s) {
    if ($strand eq "+") {
      ${$s_p}[$left_pos]++;
    } else {
      ${$s_m}[$right_pos]++;
    }
  }
}

# ------------------------------------------------------------------------
# Routines for checking properties of alignment lines
# ------------------------------------------------------------------------

sub check_unique_alignment {
  my ($qname,$flag,$rname,$pos,$mapq,$cigar,$rnext,$pnext,$tlen,$seq,$qual,@extra) = @_;
  return !( grep { /^XS:i:/ } @extra );
}

sub check_perfect_alignment {
  my ($qname,$flag,$rname,$pos,$mapq,$cigar,$rnext,$pnext,$tlen,$seq,$qual,@extra) = @_;
  return ( $cigar =~ /^[0-9]+M$/ );
}

# ------------------------------------------------------------------------
# Main loop for processing the input file
# ------------------------------------------------------------------------

while (<STDIN>) {
  chomp;
  if (/^\@/) {
    if (/^\@SQ\t+(.*)/) {
      process_SQ_line();
    }
    next;
  }
  my @line = split(/\t/);

  if ( $opt_u && !check_unique_alignment(@line) ) {
    next;
  }
  if ( $opt_p && !check_perfect_alignment(@line) ) {
    next;
  }
  process_alignment_line(@line);
}

# ------------------------------------------------------------------------
# Output the profiles
# ------------------------------------------------------------------------

sub fix_accession {
  my ($accession) = @_;
  if ($accession =~ /\|/) {
    my @l = split(/\|/, $accession);
    if (defined($l[0]) && $l[0] eq "gi") {
      my $s = $l[3];
      $s =~ s/\.[0-9]$//;
      return $s;
    } else {
      die "fix_accession(\"$accession\"),";
    }
  } elsif ($accession =~ / /) {
    my @l = split(/ /, $accession);
    if (defined($l[0])) {
      return $l[0];
    }
  } else {
    #die "fix_accession(\"$accession\"),";
    $accession =~ s/\.[0-9]$//;
    return $accession;
  }
}

sub write_profile {
  my ($accession,$tag,$type,$p,$m) = @_;
  my $out_name = $opt_d."/".fix_accession($accession).$tag.".".$type.".profile";
  open(my $fh,">",$out_name) || die "Cannot open for writing: <<$out_name>>,";
  for (my $i=1; $i<=$#{$p}; $i++) {
    print $fh ${$p}[$i]," ",${$m}[$i],"\n";
  }
  close $fh;
}

foreach my $accession (keys %contig_length) {
  if ($opt_s) {
    write_profile($accession,$opt_t,"sinister",
		  $sinisters_plus{$accession},
		  $sinisters_minus{$accession});
  }
  if ($opt_n) {
    write_profile($accession,$opt_t,"naive",
		  $naives_plus{$accession},
		  $naives_minus{$accession});
  }
}
